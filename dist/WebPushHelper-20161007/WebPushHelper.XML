<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebPushHelper</name>
    </assembly>
    <members>
        <member name="F:Jrz.WebPushHelper.FirebaseServerKey">
            <summary>
            Firebase Cloud Messaging Server Key, initialize this on app start. If in ASP .NET web app,
            you can init this in Global.asax.cs, by using `Jrz.WebPushHelper.FirebaseServerKey = "[your server key]"`
            </summary>
        </member>
        <member name="M:Jrz.WebPushHelper.SendNotification(System.Byte[],Jrz.JsonSubscription,System.Int32,System.UInt16,System.Boolean)">
            <summary>
            Send push notification
            </summary>
            <param name="data">Data as byte array</param>
            <param name="sub">Push subscription object, <see cref="T:Jrz.JsonSubscription"/></param>
            <param name="ttl">Time to live</param>
            <param name="padding">Padding</param>
            <param name="randomisePadding">Whether to randomize padding or not</param>
            <returns>True if sent successfully</returns>
        </member>
        <member name="M:Jrz.WebPushHelper.SendNotification(System.String,System.String,System.String,System.String,System.Int32,System.UInt16,System.Boolean)">
            <summary>
            Send push notification
            </summary>
            <param name="data">Data as string</param>
            <param name="endpoint">Endpoint url, it's something like `http://fcm.googleapis.com/fcm/send/[registration-id]`</param>
            <param name="userKey">The Base64-URL-Safe encoded user key, or in case of Firebase [PushSubscriptionObject].keys.p256dh</param>
            <param name="userSecret">The Base64-URL-Safe encoded user secret, or in case of Firebase [PushSubscriptionObject].keys.auth</param>
            <param name="ttl">Time to live</param>
            <param name="padding">Padding</param>
            <param name="randomisePadding">Whether to randomize padding or not</param>
            <returns>True if sent successfully</returns>
        </member>
        <member name="M:Jrz.WebPushHelper.SendNotification(System.Byte[],System.String,System.Byte[],System.Byte[],System.Int32,System.UInt16,System.Boolean)">
            <summary>
            Send push notification
            </summary>
            <param name="data">Data as byte array</param>
            <param name="endpoint">Endpoint url, it's something like `http://fcm.googleapis.com/fcm/send/[registration-id]`</param>
            <param name="userKey">User key as byte array, or in case of Firebase [PushSubscriptionObject].keys.p256dh in byte array</param>
            <param name="userSecret">User secret as byte array, or in case of Firebase [PushSubscriptionObject].keys.auth in byte array</param>
            <param name="ttl">Time to live</param>
            <param name="padding">Padding</param>
            <param name="randomisePadding">Whether to randomize padding or not</param>
            <returns>True if sent successfully</returns>
        </member>
        <member name="T:Jrz.JsonSubscription">
            <summary>
            The push subscription object representation
            </summary>
        </member>
        <member name="P:Jrz.JsonSubscription.endpoint">
            <summary>
            Endpoint url, it's something like `http://fcm.googleapis.com/fcm/send/[registration-id]`
            </summary>
        </member>
        <member name="P:Jrz.JsonSubscription.keys">
            <summary>
            The crypto keys, in case of Firebase, this dictionary should have `keys["p256dh"]` and `keys["auth"]`
            </summary>
        </member>
    </members>
</doc>
